#!/bin/bash

# Agent OS Command Line Interface (aos)
# Includes background task management integration

# Configuration
AGENT_OS_VERSION="4.0.0"
AGENT_OS_REPO="https://github.com/carmandale/agent-os"
AGENT_OS_RAW_URL="https://raw.githubusercontent.com/carmandale/agent-os/main"
AGENT_OS_HOME="${AGENT_OS_HOME:-$HOME/.agent-os}"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Helper function for status messages
print_status() {
    case "$1" in
        "success") echo -e "${GREEN}‚úÖ $2${NC}" ;;
        "warning") echo -e "${YELLOW}‚ö†Ô∏è  $2${NC}" ;;
        "error") echo -e "${RED}‚ùå $2${NC}" ;;
        "info") echo -e "${BLUE}‚ÑπÔ∏è  $2${NC}" ;;
        "check") echo -e "${CYAN}üîç $2${NC}" ;;
        *) echo "$2" ;;
    esac
}

# Integrity helpers (checksum comparison against upstream)
hash_file() {
    local path="$1"
    if [ -f "$path" ]; then
        shasum -a 256 "$path" 2>/dev/null | awk '{print $1}'
    fi
}

hash_remote_relative() {
    local rel="$1"
    curl -sSL "$AGENT_OS_RAW_URL/$rel" 2>/dev/null | shasum -a 256 | awk '{print $1}'
}

check_integrity_pair() {
    local local_path="$1"
    local remote_rel="$2"
    local name="$3"
    local lh rh
    if [ ! -f "$local_path" ]; then
        print_status "error" "$name missing ($local_path)"
        return 1
    fi
    lh=$(hash_file "$local_path")
    rh=$(hash_remote_relative "$remote_rel")
    if [ -z "$rh" ]; then
        print_status "warning" "Upstream reference unavailable for $name ($remote_rel)"
        return 1
    fi
    if [ "$lh" = "$rh" ]; then
        print_status "success" "$name matches upstream"
        return 0
    else
        print_status "warning" "$name differs from upstream"
        return 1
    fi
}

# Silent integrity boolean (no prints). Returns "true" or "false"
integrity_is_ok_silent() {
    local ok=true
    # CLI
    local lh rh
    lh=$(hash_file "$HOME/.agent-os/tools/aos"); rh=$(hash_remote_relative "tools/aos");
    { [ -n "$lh" ] && [ -n "$rh" ] && [ "$lh" = "$rh" ]; } || ok=false
    # Alias
    lh=$(hash_file "$HOME/.agent-os/tools/agentos-alias.sh"); rh=$(hash_remote_relative "tools/agentos-alias.sh");
    { [ -n "$lh" ] && [ -n "$rh" ] && [ "$lh" = "$rh" ]; } || ok=false
    # Doc updater script
    lh=$(hash_file "$HOME/.agent-os/scripts/update-documentation.sh"); rh=$(hash_remote_relative "scripts/update-documentation.sh");
    { [ -n "$lh" ] && [ -n "$rh" ] && [ "$lh" = "$rh" ]; } || ok=false
    # Doc updater command
    lh=$(hash_file "$HOME/.claude/commands/update-documentation.md"); rh=$(hash_remote_relative "commands/update-documentation.md");
    { [ -n "$lh" ] && [ -n "$rh" ] && [ "$lh" = "$rh" ]; } || ok=false
    if [ "$ok" = true ]; then echo true; else echo false; fi
}

# Repair integrity by syncing mismatched or missing files from upstream
repair_integrity() {
    local repaired=0
    local failed=0
    # List of: local_path|remote_rel|exec_flag
    local items=(
        "$HOME/.agent-os/tools/aos|tools/aos|exec"
        "$HOME/.agent-os/tools/agentos-alias.sh|tools/agentos-alias.sh|exec"
        "$HOME/.agent-os/scripts/update-documentation.sh|scripts/update-documentation.sh|exec"
        "$HOME/.claude/commands/update-documentation.md|commands/update-documentation.md|noexec"
    )
    for it in "${items[@]}"; do
        IFS='|' read -r local_path remote_rel exec_flag <<< "$it"
        local need_sync=false
        if [ ! -f "$local_path" ]; then
            need_sync=true
        else
            local lh rh
            lh=$(hash_file "$local_path")
            rh=$(hash_remote_relative "$remote_rel")
            if [ -z "$rh" ] || [ "$lh" != "$rh" ]; then
                need_sync=true
            fi
        fi
        if [ "$need_sync" = true ]; then
            mkdir -p "$(dirname "$local_path")"
            if curl -s -o "$local_path" "$AGENT_OS_RAW_URL/$remote_rel"; then
                [ "$exec_flag" = "exec" ] && chmod +x "$local_path" || true
                repaired=$((repaired+1))
                print_status "success" "Synced $(basename "$local_path")"
            else
                failed=$((failed+1))
                print_status "error" "Failed to sync $remote_rel"
            fi
        fi
    done
    if [ $failed -gt 0 ]; then
        return 1
    fi
    return 0
}

# Check if Agent OS is installed globally
check_global_installation() {
    if [ -d "$HOME/.agent-os/instructions" ] && [ -d "$HOME/.agent-os/standards" ]; then
        return 0
    else
        return 1
    fi
}

# Show Bash observation dashboard (Issue #19)
show_bash_dashboard() {
    local log_file=""
    
    # Determine log location
    if [ -n "${CLAUDE_PROJECT_DIR:-}" ] && [ -f "${CLAUDE_PROJECT_DIR}/.agent-os/observed-bash.jsonl" ]; then
        log_file="${CLAUDE_PROJECT_DIR}/.agent-os/observed-bash.jsonl"
    elif [ -f "$HOME/.agent-os/logs/observed-bash.jsonl" ]; then
        log_file="$HOME/.agent-os/logs/observed-bash.jsonl"
    else
        print_status "info" "No Bash observation data yet"
        echo "Run commands through Claude Code with background tasks enabled to see observations"
        return 0
    fi
    
    echo "üìä Bash Command Dashboard"
    echo "========================="
    echo ""
    
    # Check if jq is available
    if ! command -v jq >/dev/null 2>&1; then
        print_status "warning" "jq not installed - showing raw data"
        tail -20 "$log_file"
        return 0
    fi
    
    # Show recent commands
    echo "üïê Recent Commands (last 10):"
    echo "------------------------------"
    tail -10 "$log_file" | jq -r '
        "\(.ts | split("T")[1] | split(".")[0]) [\(.intent)] \(.cmd | .[0:60])\(if (.cmd | length) > 60 then "..." else "" end) ‚Üí \(if .exit then "exit: \(.exit)" else "running" end)"
    '
    
    echo ""
    echo "üìà Statistics:"
    echo "--------------"
    
    # Count by intent
    local server_count=$(grep '"intent":"server"' "$log_file" 2>/dev/null | wc -l | tr -d ' ')
    local test_count=$(grep '"intent":"test"' "$log_file" 2>/dev/null | wc -l | tr -d ' ')
    local build_count=$(grep '"intent":"build"' "$log_file" 2>/dev/null | wc -l | tr -d ' ')
    local other_count=$(grep '"intent":"other"' "$log_file" 2>/dev/null | wc -l | tr -d ' ')
    
    echo "  üöÄ Servers started: $server_count"
    echo "  üß™ Tests run: $test_count"  
    echo "  üî® Builds executed: $build_count"
    echo "  üì¶ Other commands: $other_count"
    
    # Show recent failures
    echo ""
    echo "‚ùå Recent Failures:"
    echo "------------------"
    local failures=$(tail -50 "$log_file" | jq -r 'select(.event == "post" and .exit != "0" and .exit != "unknown") | "  ‚Ä¢ \(.cmd | .[0:60]) (exit: \(.exit))"' | tail -5)
    if [ -n "$failures" ]; then
        echo "$failures"
    else
        echo "  No recent failures"
    fi
    
    echo ""
    echo "üí° Tips:"
    echo "  ‚Ä¢ Use 'aos monitor <id>' to watch running tasks"
    echo "  ‚Ä¢ Use 'aos logs <id>' to view task output"
    echo "  ‚Ä¢ Enable ENABLE_BACKGROUND_TASKS=1 in Claude Code for auto-backgrounding"
}

# Detect project type (claude, cursor, both, or unknown)
detect_project_type() {
    local has_claude=false
    local has_cursor=false
    
    if [ -f ".claude/claude.json" ] || [ -f "CLAUDE.md" ]; then
        has_claude=true
    fi
    
    if [ -d ".cursor" ] || [ -f ".cursorrules" ]; then
        has_cursor=true
    fi
    
    if $has_claude && $has_cursor; then
        echo "both"
    elif $has_claude; then
        echo "claude"
    elif $has_cursor; then
        echo "cursor"
    else
        echo "unknown"
    fi
}

# Check if project setup is current
check_project_currency() {
    local project_type=$(detect_project_type)
    local issues=()
    
    case "$project_type" in
        "claude"|"both")
            # Check Claude commands
            if [ -f ".claude/claude.json" ]; then
                if ! grep -q "plan-product" ".claude/claude.json" 2>/dev/null; then
                    issues+=("Claude commands outdated")
                fi
            else
                # Fallback: consider global Claude commands as OK if present
                if [ -f "$HOME/.claude/commands/plan-product.md" ]; then
                    : # treated as current
                else
                    issues+=("Claude commands not configured")
                fi
            fi
            
            # Check hooks version
            if [ -f "$HOME/.claude/settings.json" ]; then
                if ! grep -q "workflow-enforcement-hook-v2" "$HOME/.claude/settings.json" 2>/dev/null; then
                    issues+=("Claude hooks need update")
                fi
            fi
            ;;
    esac
    
    case "$project_type" in
        "cursor"|"both")
            # Check Cursor rules
            local cursor_ok=false
            if [ -f ".cursorrules" ]; then
                if grep -q "execute-tasks.md" ".cursorrules" 2>/dev/null; then
                    cursor_ok=true
                fi
            fi
            # Also consider modern .cursor/rules/*.mdc
            if [ "$cursor_ok" = false ] && ls .cursor/rules/*execute-tasks*.mdc >/dev/null 2>&1; then
                cursor_ok=true
            fi
            if [ "$cursor_ok" = false ]; then
                if [ -f ".cursorrules" ] || [ -d ".cursor/rules" ]; then
                    issues+=("Cursor rules outdated")
                else
                    issues+=("Cursor rules not configured")
                fi
            fi
            ;;
    esac
    
    # Note: Product docs are created by /plan-product or /analyze-product commands,
    # not during initial setup, so we don't check for them here
    
    if [ ${#issues[@]} -eq 0 ]; then
        echo "current"
    else
        printf '%s\n' "${issues[@]}"
    fi
}

# Check for updates
check_for_updates() {
    # Get remote version
    local remote_version=$(curl -sSL "$AGENT_OS_RAW_URL/VERSION" 2>/dev/null | head -n1)
    
    # Get local version
    local local_version=""
    if [ -f "$HOME/.agent-os/VERSION" ]; then
        local_version=$(head -n1 "$HOME/.agent-os/VERSION")
    fi
    
    # Normalize versions (remove 'v' prefix if present)
    remote_version="${remote_version#v}"
    local_version="${local_version#v}"
    
    if [ "$local_version" = "$remote_version" ]; then
        echo "current"
    elif [ -z "$local_version" ]; then
        echo "not installed"
    else
        echo "$remote_version"
    fi
}

# Smart update function
smart_update() {
    # Non-interactive support: -y/--yes/--non-interactive or env AOS_NONINTERACTIVE=1
    local non_interactive=false
    for arg in "$@"; do
        case "$arg" in
            -y|--yes|--non-interactive)
                non_interactive=true
                ;;
        esac
    done
    if [ "${AOS_NONINTERACTIVE:-}" = "1" ]; then
        non_interactive=true
    fi

    print_status "check" "Checking for updates..."

    local update_status=$(check_for_updates)
    local integrity_ok=$(integrity_is_ok_silent)

    if [ "$update_status" = "current" ]; then
        if [ "$integrity_ok" != "true" ]; then
            print_status "warning" "Installed files differ from upstream."
            local response=""
            if [ "$non_interactive" = true ]; then
                response="y"
                print_status "info" "Repairing integrity (non-interactive)..."
            else
                echo -n "Repair mismatched files now? [y/N]: "
                read -r response
            fi
            if [[ "$response" =~ ^[Yy]$ ]]; then
                if repair_integrity; then
                    print_status "success" "Integrity repair complete."
                    return 0
                else
                    print_status "error" "Integrity repair encountered errors."
                    return 1
                fi
            else
                print_status "info" "Skipped integrity repair."
                return 0
            fi
        else
            print_status "success" "Agent OS is already up to date!"
            return 0
        fi
    elif [ "$update_status" = "not installed" ]; then
        print_status "error" "Agent OS is not installed. Run 'aos init' first."
        return 1
    else
        print_status "info" "Update available: $update_status"
        local response=""
        if [ "$non_interactive" = true ]; then
            response="y"
            print_status "info" "Proceeding with non-interactive update..."
        else
            echo -n "Update now? [y/N]: "
            read -r response
        fi
        
        if [[ "$response" =~ ^[Yy]$ ]]; then
            print_status "info" "Updating Agent OS..."
            if curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash -s -- --overwrite-instructions --overwrite-standards; then
                print_status "success" "Update complete!"
                
                # Check if we're in a project; skip extra prompts in non-interactive mode
                local project_type=$(detect_project_type)
                if [ "$project_type" != "unknown" ] && [ "$non_interactive" != true ]; then
                    echo -n "Update project setup too? [y/N]: "
                    read -r response
                    if [[ "$response" =~ ^[Yy]$ ]]; then
                        quick_setup_project
                    fi
                fi
            else
                print_status "error" "Update failed"
                return 1
            fi
        fi
    fi
}

# Comprehensive status check
check_comprehensive_status() {
    echo "üîç Agent OS Status Report"
    echo "========================="
    echo ""
    
    # Global installation
    echo "Global Installation:"
    if check_global_installation; then
        print_status "success" "Installed at ~/.agent-os"
        
        # Version details
        local update_status=$(check_for_updates)
        local local_version=""
        local remote_version=""
        [ -f "$HOME/.agent-os/VERSION" ] && local_version=$(head -n1 "$HOME/.agent-os/VERSION")
        remote_version=$(curl -sSL "$AGENT_OS_RAW_URL/VERSION" 2>/dev/null | head -n1)
        # Normalize
        local_version="${local_version#v}"; remote_version="${remote_version#v}"
        
        if [ "$update_status" = "current" ]; then
            print_status "success" "Version is current (${local_version})"
        elif [ "$update_status" = "not installed" ]; then
            print_status "error" "Version: not installed (latest ${remote_version})"
        else
            print_status "warning" "Update available: ${remote_version} (local ${local_version})"
            # Store for later prompt
            UPDATE_AVAILABLE="$remote_version"
        fi
        
        # Check components
        echo ""
        echo "Components:"
        [ -d "$HOME/.agent-os/instructions" ] && print_status "success" "Instructions installed" || print_status "error" "Instructions missing"
        [ -d "$HOME/.agent-os/standards" ] && print_status "success" "Standards installed" || print_status "error" "Standards missing"
        [ -d "$HOME/.agent-os/workflow-modules" ] && print_status "success" "Workflow modules installed" || print_status "error" "Workflow modules missing"
        [ -d "$HOME/.agent-os/hooks" ] && print_status "success" "Hooks installed" || print_status "error" "Hooks missing"

        # File integrity (compare to upstream main)
        echo ""
        echo "Integrity (checksums vs upstream):"
        local integrity_ok=true
        check_integrity_pair "$HOME/.agent-os/tools/aos" "tools/aos" "CLI (aos)" || integrity_ok=false
        check_integrity_pair "$HOME/.agent-os/tools/agentos-alias.sh" "tools/agentos-alias.sh" "Alias script" || integrity_ok=false
        check_integrity_pair "$HOME/.agent-os/scripts/update-documentation.sh" "scripts/update-documentation.sh" "Doc updater script" || integrity_ok=false
        check_integrity_pair "$HOME/.claude/commands/update-documentation.md" "commands/update-documentation.md" "Doc updater command" || integrity_ok=false
        if [ "$integrity_ok" = true ]; then
            print_status "success" "Integrity OK"
        else
            print_status "warning" "Integrity issues detected (mismatch or missing files)."
            echo "   üí° To sync all components: ./setup.sh"
            if [ -d "$HOME/.claude/commands" ]; then
                echo "   üí° To sync Claude commands only: ./setup-claude-code.sh --overwrite-commands"
            fi
        fi
    else
        print_status "error" "Not installed"
        echo "Run: curl -sSL $AGENT_OS_RAW_URL/setup.sh | bash"
    fi
    
    # Project setup
    echo ""
    echo "Project Setup:"
    local project_type=$(detect_project_type)
    
    if [ "$project_type" = "unknown" ]; then
        print_status "info" "No AI assistant configured in this project"
    else
        print_status "info" "Type: $project_type"
        
        local project_issues=$(check_project_currency)
        if [ "$project_issues" = "current" ]; then
            print_status "success" "All components current"
        else
            print_status "warning" "Issues found:"
            echo "$project_issues" | while IFS= read -r issue; do
                echo "   ‚ö†Ô∏è  $issue"
            done
        fi
        
        # Check product docs
        if [ -d ".agent-os/product" ]; then
            print_status "success" "Product documentation exists"
        else
            print_status "info" "Product docs not initialized (run /plan-product or /analyze-product)"
        fi
    fi
    
    # Background tasks status
    echo ""
    echo "Background Tasks:"
    if [ -f "$AGENT_OS_HOME/tasks/registry.json" ]; then
        local task_count=$(python3 -c "
import json
with open('$AGENT_OS_HOME/tasks/registry.json', 'r') as f:
    data = json.load(f)
    running = len([t for t in data['tasks'] if t['status'] == 'running'])
    total = len(data['tasks'])
    print(f'{running} running, {total} total')
" 2>/dev/null || echo "0 tasks")
        print_status "info" "Tasks: $task_count"
    else
        print_status "info" "No background tasks"
    fi
    
    # Offer to update if available
    if [ -n "${UPDATE_AVAILABLE:-}" ]; then
        echo ""
        echo -n "Update Agent OS to version $UPDATE_AVAILABLE now? [y/N]: "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            smart_update
        fi
    fi
}

# Quick project setup
quick_setup_project() {
    local project_type=$(detect_project_type)
    local project_issues=$(check_project_currency)
    
    # Show current status
    if [ "$project_type" != "unknown" ]; then
        echo ""
        print_status "info" "Current setup: $project_type"
        if [ "$project_issues" != "current" ]; then
            print_status "warning" "Issues detected:"
            echo "$project_issues" | while IFS= read -r issue; do
                echo "   ‚ö†Ô∏è  $issue"
            done
            echo ""
        fi
    fi
    
    # Always offer to change/add AI assistant setup
    echo ""
    if [ "$project_type" = "unknown" ]; then
        echo "Which AI assistant will you use?"
    else
        echo "Current setup: $project_type. Change or add AI assistant?"
    fi
    echo "  1) Claude Code"
    echo "  2) Cursor" 
    echo "  3) Both"
    if [ "$project_type" != "unknown" ]; then
        echo "  4) Keep current ($project_type)"
    else
        echo "  4) Skip"
    fi
    echo -n "Choice [1-4]: "
    read -r choice
    
    case "$choice" in
        1) project_type="claude" ;;
        2) project_type="cursor" ;;
        3) project_type="both" ;;
        4) 
            if [ "$project_type" = "unknown" ]; then
                return 1
            fi
            # Keep existing type
            ;;
        *) return 1 ;;
    esac
    
    # Create project Agent OS structure if it doesn't exist
    if [ ! -d ".agent-os" ]; then
        print_status "info" "Creating .agent-os project structure..."
        mkdir -p .agent-os/product
        mkdir -p .agent-os/specs
        print_status "success" "Project structure created"
    fi
    
    # Setup based on type
    case "$project_type" in
        "claude"|"both")
            print_status "info" "Setting up Claude Code..."
            # Check if hooks should be skipped
            local skip_hooks=""
            if [ -f "$HOME/.claude/settings.json" ] && grep -q "workflow-enforcement-hook" "$HOME/.claude/settings.json" 2>/dev/null; then
                skip_hooks="--skip-hooks"
            fi
            
            if curl -sSL "$AGENT_OS_RAW_URL/setup-claude-code.sh" | bash -s -- $skip_hooks 2>/dev/null; then
                print_status "success" "Claude Code ready"
            else
                print_status "error" "Claude Code setup failed"
            fi
            
            if [ "$project_type" = "both" ]; then
                print_status "info" "Setting up Cursor..."
                if curl -sSL "$AGENT_OS_RAW_URL/setup-cursor.sh" | bash 2>/dev/null; then
                    print_status "success" "Cursor ready"
                else
                    print_status "error" "Cursor setup failed"
                fi
            fi
            ;;
            
        "cursor")
            print_status "info" "Setting up Cursor..."
            if curl -sSL "$AGENT_OS_RAW_URL/setup-cursor.sh" | bash 2>/dev/null; then
                print_status "success" "Cursor ready"
            else
                print_status "error" "Cursor setup failed"
            fi
            ;;
    esac
    
    # Verify setup
    echo ""
    print_status "check" "Verifying project setup..."
    local new_issues=$(check_project_currency)
    if [ "$new_issues" = "current" ]; then
        print_status "success" "Project setup complete and current!"
    else
        print_status "warning" "Some issues remain - manual intervention may be needed"
    fi
    
    # Quick tips
    echo ""
    echo "Quick start commands:"
    if [ "$project_type" = "claude" ] || [ "$project_type" = "both" ]; then
        echo "  Claude: /analyze-product (for existing code) or /plan-product (for new)"
    fi
    if [ "$project_type" = "cursor" ] || [ "$project_type" = "both" ]; then
        echo "  Cursor: @analyze-product (for existing code) or @plan-product (for new)"
    fi
}

# Note: aos-background was removed - Agent OS observes Claude Code's native backgrounding via hooks
# Background task functionality is now handled through Bash observation hooks

# Main menu - streamlined with better validation
main_menu() {
    # Quick validation
    local global_ok=false
    local project_ok=false
    
    if check_global_installation; then
        global_ok=true
        local update_status=$(check_for_updates)
        local integrity_ok=$(integrity_is_ok_silent)
        if [ "$update_status" != "current" ] && [ "$update_status" != "main" ] && [ -n "$update_status" ]; then
            print_status "warning" "Agent OS update available: $update_status"
        elif [ "$integrity_ok" != "true" ]; then
            print_status "warning" "Installed files differ from upstream (run 'aos status' for details)"
        else
            print_status "success" "Agent OS is up to date"
        fi
    else
        print_status "warning" "Agent OS not installed"
    fi
    
    local project_type=$(detect_project_type)
    local project_issues=$(check_project_currency)
    if [ "$project_type" != "unknown" ]; then
        if [ "$project_issues" = "current" ]; then
            project_ok=true
            print_status "success" "Project setup is current"
        else
            print_status "warning" "Project setup needs updates"
        fi
    else
        print_status "info" "No project setup detected"
    fi
    
    # Show menu
    echo ""
    echo "What would you like to do?"
    
    if [ "$global_ok" = false ]; then
        echo "  1) Install Agent OS"
    elif [ "$project_ok" = false ]; then
        echo "  1) Setup/fix project"
    else
        echo "  1) Verify project setup"
    fi
    
    echo "  2) Update Agent OS"
    echo "  3) Full status report"
    echo "  4) Bash dashboard"
    echo "  5) Exit"
    echo ""
    echo -n "Choice [1-5]: "
    read -r choice
    
    case "$choice" in
        1) 
            if [ "$global_ok" = false ]; then
                # Install Agent OS
                if curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash; then
                    print_status "success" "Installation complete!"
                    quick_setup_project
                fi
            else
                # Setup or verify project
                quick_setup_project
            fi
            ;;
        2) smart_update ;;
        3) check_comprehensive_status ;;
        4) show_bash_dashboard ;;
        *) print_status "info" "Goodbye!" ;;
    esac
}

# Command line interface
case "${1:-}" in
    # Core commands
    "init")
        if ! check_global_installation; then
            print_status "info" "Installing Agent OS first..."
            curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash
        fi
        quick_setup_project
        ;;
    "update")
        shift
        smart_update "$@"
        ;;
    "status"|"check")
        check_comprehensive_status
        ;;
    
    # Note: Background task commands removed - use Claude Code's native backgrounding
    # Agent OS now observes via hooks instead of managing processes
    
    # Bash observation commands (Issue #19)
    "notify")
        shift
        if [ -z "$*" ]; then
            print_status "error" "Usage: aos notify <message>"
            exit 1
        fi
        print_status "info" "$*"
        ;;
    "dashboard")
        show_bash_dashboard
        ;;
    
    # Help
    "help"|"--help"|"-h")
        echo "aos - Agent OS CLI v4"
        echo ""
        echo "Usage: aos [command] [options]"
        echo ""
        echo "Core Commands:"
        echo "  init              Setup/fix Agent OS in current project"
        echo "  update            Smart update Agent OS"
        echo "  status            Comprehensive status report"
        echo ""
        echo "Bash Observation Commands:"
        echo "  dashboard         View observed Bash command history"
        echo "  notify <msg>      Display a notification message"
        echo ""
        echo "Examples:"
        echo "  aos init                    # Setup Agent OS in project"
        echo "  aos status                  # Check installation status"
        echo "  aos dashboard               # View observed Bash commands"
        echo "  aos notify 'Build complete' # Send notification"
        echo ""
        echo "No command runs interactive mode"
        ;;
    "")
        # Interactive mode
        echo "üöÄ Agent OS CLI v4"
        echo "=================="
        echo ""
        main_menu
        ;;
    *)
        print_status "error" "Unknown command: $1"
        echo "Run 'aos help' for usage"
        exit 1
        ;;
esac