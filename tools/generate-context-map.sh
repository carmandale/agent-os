#!/bin/bash
#
# generate-context-map.sh
# Agent OS Context Mapping Generator
#
# Generates comprehensive documentation of the Agent OS three-context architecture
# Creates visual maps showing what files belong where and how they interact

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
	local color=$1
	local message=$2
	echo -e "${color}${message}${NC}"
}

print_info() {
	print_status "$BLUE" "ℹ️  $1"
}

print_success() {
	print_status "$GREEN" "✅ $1"
}

# Get script directory (source context)
get_source_context() {
	echo "$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
}

# Get install context
get_install_context() {
	echo "$HOME/.agent-os"
}

# Get project context (if in a project)
get_project_context() {
	local current_dir="$(pwd)"
	while [[ "$current_dir" != "/" ]]; do
		if [[ -d "$current_dir/.agent-os" ]]; then
			echo "$current_dir/.agent-os"
			return 0
		fi
		current_dir="$(dirname "$current_dir")"
	done
	return 1
}

# Generate markdown documentation header
generate_doc_header() {
	local output_file=$1
	local title=$2
	
	cat > "$output_file" << EOF
# $title

> Generated by Agent OS Context Mapping Generator
> Date: $(date '+%Y-%m-%d %H:%M:%S')

## Overview

Agent OS uses a three-context architecture to organize files and provide flexible customization:

1. **Source Context**: Repository files (development and distribution)
2. **Install Context**: Global user installation (~/.agent-os/)
3. **Project Context**: Project-specific overrides (.agent-os/)

This document provides a complete mapping of files across all contexts.

EOF
}

# Generate source context map
generate_source_context_map() {
	local output_file=$1
	local source_path=$(get_source_context)
	
	cat >> "$output_file" << 'EOF'
## Source Context (Repository)

The source context contains all files needed for Agent OS development and distribution.

### Directory Structure

```
agent-os/
├── standards/              # Default development standards templates
│   ├── tech-stack.md      # Technology choices and preferences
│   ├── code-style.md      # Code formatting and style rules
│   └── best-practices.md  # Development methodology guidelines
├── instructions/           # Core Agent OS workflow instructions
│   ├── core/              # Main workflow commands
│   │   ├── plan-product.md      # Product initialization workflow
│   │   ├── create-spec.md       # Feature specification workflow  
│   │   ├── execute-tasks.md     # Task execution workflow
│   │   ├── execute-task.md      # Single task executor
│   │   └── analyze-product.md   # Existing project analysis
│   └── meta/              # Supporting instruction components
│       └── pre-flight.md  # Pre-execution validation rules
├── scripts/               # Dynamic workflow validation scripts
│   ├── workspace-hygiene-check.sh   # Git status and cleanup
│   ├── project-context-loader.sh    # Project configuration detection
│   ├── task-validator.sh            # Task consistency validation
│   ├── config-resolver.py           # Project configuration resolver
│   ├── session-memory.sh            # Session state persistence
│   ├── context-aware-wrapper.sh     # Intent-aware command routing
│   └── testing-enforcer.sh          # Quality assurance enforcement
├── workflow-modules/       # Modular workflow step definitions
│   ├── step-1-hygiene-and-setup.md     # Workspace preparation
│   ├── step-2-planning-and-execution.md # Implementation workflow
│   ├── step-3-quality-assurance.md     # Quality validation
│   └── step-4-git-integration.md       # Git workflow and completion
├── commands/              # Claude Code command definitions
│   ├── plan-product.md    # /plan-product command
│   ├── create-spec.md     # /create-spec command
│   ├── execute-tasks.md   # /execute-tasks command
│   ├── analyze-product.md # /analyze-product command
│   ├── hygiene-check.md   # /hygiene-check command
│   └── update-documentation.md # /update-documentation command
├── claude-code/agents/    # Claude Code agent definitions
│   ├── context-fetcher.md # Codebase search and analysis
│   ├── date-checker.md    # Accurate date determination
│   ├── file-creator.md    # Template-based file generation
│   ├── git-workflow.md    # Git operations and GitHub integration
│   └── test-runner.md     # Multi-framework test execution
├── hooks/                 # Claude Code workflow enforcement hooks
│   ├── install-hooks.sh   # Hook installation script
│   ├── claude-code-hooks.json # Hook configuration
│   ├── workflow-enforcement-hook.py # Main enforcement logic
│   ├── stop-hook.sh       # Workflow completion handler
│   ├── post-tool-use-hook.sh # Post-action validation
│   ├── user-prompt-submit-hook.sh # Input validation
│   └── lib/              # Hook utility libraries
│       ├── workflow-detector.sh    # Workflow state detection
│       ├── git-utils.sh           # Git operation helpers
│       ├── context-builder.sh     # Context information builder
│       ├── evidence-standards.sh  # Evidence validation
│       ├── project-config-injector.sh # Config injection
│       ├── testing-enforcer.sh    # Testing requirement enforcement
│       └── testing-reminder.sh    # Testing workflow reminders
├── tools/                 # Command-line utilities
│   ├── aos               # Unified Agent OS CLI tool
│   ├── context-validator.sh      # Context validation system
│   ├── generate-context-map.sh   # This script
│   └── install-aos-alias.sh      # Quick alias installer
├── tests/                # Test suites
│   ├── installation/     # Installation validation tests
│   └── *.bats           # BATS test files
├── setup.sh              # Main installation script
├── setup-claude-code.sh  # Claude Code integration setup
├── VERSION               # Version tracking
└── README.md             # Project documentation
```

EOF

	# Add actual file counts
	if [[ -d "$source_path" ]]; then
		print_info "Analyzing source context files..."
		
		cat >> "$output_file" << EOF
### File Statistics

EOF
		
		# Count files in each major directory
		local dirs=("standards" "instructions" "scripts" "workflow-modules" "commands" "claude-code/agents" "hooks" "tools" "tests")
		
		for dir in "${dirs[@]}"; do
			if [[ -d "$source_path/$dir" ]]; then
				local count=$(find "$source_path/$dir" -type f | wc -l | tr -d ' ')
				echo "- **$dir/**: $count files" >> "$output_file"
			fi
		done
		
		echo "" >> "$output_file"
	fi
}

# Generate install context map
generate_install_context_map() {
	local output_file=$1
	local install_path=$(get_install_context)
	
	cat >> "$output_file" << 'EOF'
## Install Context (~/.agent-os/)

The install context contains the user's global Agent OS installation. Files here are copied from the source context during installation.

### Purpose
- Provides global Agent OS functionality for all projects
- Contains user-customizable standards and preferences  
- Serves as fallback when project-specific files don't exist

### Directory Structure

```
~/.agent-os/
├── standards/              # User's development standards (customizable)
│   ├── tech-stack.md      # Personal technology preferences
│   ├── code-style.md      # Personal code style rules
│   └── best-practices.md  # Personal development practices
├── instructions/           # Agent OS workflow instructions
│   ├── core/              # Core workflow commands
│   └── meta/              # Supporting components
├── scripts/               # Dynamic workflow scripts (always updated)
├── workflow-modules/       # Workflow step definitions (always updated)
├── tools/                 # CLI utilities (always updated)
│   └── aos               # Agent OS command-line interface
└── VERSION                # Installation version tracking
```

EOF

	# Add installation status
	if [[ -d "$install_path" ]]; then
		cat >> "$output_file" << EOF
### Installation Status

EOF
		
		if [[ -f "$install_path/VERSION" ]]; then
			local version=$(cat "$install_path/VERSION")
			echo "- **Installed Version**: $version" >> "$output_file"
		else
			echo "- **Installation**: ❌ VERSION file missing" >> "$output_file"
		fi
		
		# Check key directories
		local dirs=("standards" "instructions" "scripts" "workflow-modules" "tools")
		for dir in "${dirs[@]}"; do
			if [[ -d "$install_path/$dir" ]]; then
				local count=$(find "$install_path/$dir" -type f | wc -l | tr -d ' ')
				echo "- **$dir/**: ✅ $count files" >> "$output_file"
			else
				echo "- **$dir/**: ❌ Missing" >> "$output_file"
			fi
		done
	else
		cat >> "$output_file" << EOF
### Installation Status

❌ **Agent OS not installed** - Install context not found at: \`$install_path\`

To install Agent OS:
\`\`\`bash
curl -sSL https://raw.githubusercontent.com/carmandale/agent-os/main/setup.sh | bash
\`\`\`

EOF
	fi
	
	echo "" >> "$output_file"
}

# Generate project context map
generate_project_context_map() {
	local output_file=$1
	
	cat >> "$output_file" << 'EOF'
## Project Context (.agent-os/)

The project context contains project-specific Agent OS files that override global settings.

### Purpose
- Override global standards for specific projects
- Store project-specific workflow customizations
- Maintain project documentation and decisions
- Enable team-specific Agent OS configurations

### Directory Structure

```
project-root/.agent-os/
├── product/               # Project documentation and decisions
│   ├── mission.md        # Project mission and goals
│   ├── roadmap.md        # Development roadmap
│   ├── decisions.md      # Technical decision log
│   ├── tech-stack.md     # Project technology choices
│   ├── code-style.md     # Project code style overrides
│   └── dev-best-practices.md # Project development practices
├── specs/                # Feature specifications
│   └── YYYY-MM-DD-feature-name-#123/
│       ├── spec.md       # Feature specification document
│       ├── tasks.md      # Task breakdown and status
│       └── sub-specs/    # Detailed technical specifications
├── standards/            # Project standard overrides (optional)
├── instructions/         # Project workflow overrides (optional)
└── any-other-customization/
```

EOF

	# Check if we're in a project context
	if project_context=$(get_project_context); then
		cat >> "$output_file" << EOF
### Current Project Status

✅ **Project context found**: \`$project_context\`

EOF
		
		# Analyze project files
		if [[ -d "$project_context" ]]; then
			local dirs=("product" "specs" "standards" "instructions")
			for dir in "${dirs[@]}"; do
				if [[ -d "$project_context/$dir" ]]; then
					local count=$(find "$project_context/$dir" -type f | wc -l | tr -d ' ')
					echo "- **$dir/**: ✅ $count files" >> "$output_file"
				else
					echo "- **$dir/**: ➖ Not present" >> "$output_file"
				fi
			done
		fi
	else
		cat >> "$output_file" << EOF
### Current Project Status

➖ **No project context** - Not currently in an Agent OS project

To initialize Agent OS in a project:
\`\`\`bash
/plan-product    # For new projects
/analyze-product # For existing projects
\`\`\`

EOF
	fi
	
	echo "" >> "$output_file"
}

# Generate file flow diagram
generate_file_flow_diagram() {
	local output_file=$1
	
	cat >> "$output_file" << 'EOF'
## File Flow and Inheritance

This diagram shows how files flow between contexts and inherit from each other:

```mermaid
graph TD
    A[Source Context<br/>Repository] --> B[Install Context<br/>~/.agent-os/]
    B --> C[Project Context<br/>.agent-os/]
    
    A --> D[setup.sh<br/>Installation]
    D --> B
    
    B --> E[Global Standards<br/>Fallback Values]
    C --> F[Project Overrides<br/>Specific Values]
    
    E --> G[Effective Configuration]
    F --> G
    
    G --> H[AI Assistant<br/>Workflows]
    
    subgraph "File Resolution Priority"
        I[1. Project Context] --> J[2. Install Context] --> K[3. Built-in Defaults]
    end
    
    subgraph "Reference Types"
        L[@~/.agent-os/file.md<br/>Install Context Reference]
        M[@.agent-os/file.md<br/>Project Context Reference]  
        N[!~/.agent-os/scripts/script.sh<br/>Script Execution]
    end
```

### Reference Resolution Rules

1. **Install Context References** (`@~/.agent-os/...`)
   - Always resolve to global installation
   - Used for core Agent OS functionality
   - Examples: `@~/.agent-os/instructions/core/execute-tasks.md`

2. **Project Context References** (`@.agent-os/...`)
   - First check project directory
   - Fall back to install context if not found
   - Used for customizable content
   - Examples: `@.agent-os/product/mission.md`

3. **Script Execution References** (`!~/.agent-os/scripts/...`)
   - Execute scripts from install context
   - Used in workflow instructions
   - Examples: `!~/.agent-os/scripts/workspace-hygiene-check.sh`

EOF
}

# Generate usage examples
generate_usage_examples() {
	local output_file=$1
	
	cat >> "$output_file" << 'EOF'
## Context Usage Examples

### Source Context Usage
- **Development**: Modify Agent OS itself
- **Distribution**: Source of truth for all Agent OS files
- **Testing**: Run tests and validate changes

```bash
# Validate source context
cd /path/to/agent-os
./tools/context-validator.sh --source-only

# Run installation tests
bats tests/installation/
```

### Install Context Usage
- **Global Configuration**: Set your personal development standards
- **Cross-Project**: Settings that apply to all your projects
- **Tool Access**: Access to `aos` CLI and other utilities

```bash
# Customize your global standards
vim ~/.agent-os/standards/tech-stack.md

# Validate install context
./tools/context-validator.sh --install-only

# Use Agent OS tools
~/.agent-os/tools/aos status
```

### Project Context Usage
- **Project Standards**: Override global settings for specific projects
- **Team Coordination**: Share project-specific configurations
- **Feature Development**: Use Agent OS workflows for structured development

```bash
# Initialize Agent OS in project
/plan-product

# Create project-specific standards
mkdir -p .agent-os/product
vim .agent-os/product/tech-stack.md

# Validate project context
./tools/context-validator.sh --project-only
```

## Context Validation Commands

```bash
# Validate all contexts
./tools/context-validator.sh

# Validate specific context
./tools/context-validator.sh --source-only
./tools/context-validator.sh --install-only  
./tools/context-validator.sh --project-only

# Generate context map (this document)
./tools/generate-context-map.sh

# Validate file references
./tools/validate-references.sh
```

## Troubleshooting Context Issues

### Common Problems

1. **"Install context not found"**
   - Run Agent OS installation: `curl -sSL https://raw.githubusercontent.com/carmandale/agent-os/main/setup.sh | bash`

2. **"Project context references not resolving"**
   - Check if you're in an Agent OS project directory
   - Verify `.agent-os/` directory exists
   - Check file paths in project context

3. **"Context violations detected"**
   - Files may be in wrong locations
   - Run context validator to identify issues
   - Use appropriate context for each file type

4. **"Reference resolution failing"**
   - Check file paths in markdown references
   - Verify referenced files exist in target context
   - Ensure proper reference syntax (`@` vs `!`)

### Getting Help

- Run `./tools/context-validator.sh` for detailed diagnostics
- Check Agent OS documentation at https://github.com/carmandale/agent-os
- Review this context map for proper file locations

---

*Generated by Agent OS Context Mapping Generator*
EOF
}

# Main function
main() {
	local output_file="${1:-CONTEXT-MAP.md}"
	
	print_info "Generating Agent OS context map: $output_file"
	
	# Generate complete context documentation
	generate_doc_header "$output_file" "Agent OS Context Architecture Map"
	generate_source_context_map "$output_file"
	generate_install_context_map "$output_file"  
	generate_project_context_map "$output_file"
	generate_file_flow_diagram "$output_file"
	generate_usage_examples "$output_file"
	
	print_success "Context map generated: $output_file"
	
	# Provide next steps
	echo ""
	print_info "Next steps:"
	echo "  1. Review the generated context map: $output_file"
	echo "  2. Validate contexts: ./tools/context-validator.sh"
	echo "  3. Check references: ./tools/validate-references.sh"
	echo ""
}

# Show usage information
show_usage() {
	cat << EOF
Agent OS Context Map Generator

Usage: $0 [OUTPUT_FILE]

ARGUMENTS:
  OUTPUT_FILE    Output markdown file (default: CONTEXT-MAP.md)

OPTIONS:
  -h, --help     Show this help message

DESCRIPTION:
  Generates comprehensive documentation of Agent OS's three-context architecture:
  
  - Source Context:  Repository files
  - Install Context: ~/.agent-os/ files
  - Project Context: .agent-os/ files
  
  Creates visual maps, file listings, reference guides, and usage examples.

EXAMPLES:
  $0                           # Generate CONTEXT-MAP.md
  $0 docs/ARCHITECTURE.md      # Generate custom filename
  $0 --help                    # Show this help

EOF
}

# Parse command line arguments
case "${1:-}" in
	-h|--help)
		show_usage
		exit 0
		;;
	*)
		main "$@"
		;;
esac