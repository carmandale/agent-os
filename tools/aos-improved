#!/bin/bash

# Agent OS Quick Init Tool (aos) - Improved Version
# Version: 2.0.0

# Configuration
AGENT_OS_VERSION="2.0.0"
AGENT_OS_REPO="https://github.com/carmandale/agent-os"
AGENT_OS_RAW_URL="https://raw.githubusercontent.com/carmandale/agent-os/main"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper function for status messages
print_status() {
    case "$1" in
        "success") echo -e "${GREEN}✅ $2${NC}" ;;
        "warning") echo -e "${YELLOW}⚠️  $2${NC}" ;;
        "error") echo -e "${RED}❌ $2${NC}" ;;
        "info") echo -e "${BLUE}ℹ️  $2${NC}" ;;
        *) echo "$2" ;;
    esac
}

# Check if Agent OS is installed globally
check_global_installation() {
    if [ -d "$HOME/.agent-os/instructions" ] && [ -d "$HOME/.agent-os/standards" ]; then
        return 0
    else
        return 1
    fi
}

# Detect project type (claude, cursor, both, or unknown)
detect_project_type() {
    local has_claude=false
    local has_cursor=false
    
    if [ -f ".claude/claude.json" ] || [ -f "CLAUDE.md" ]; then
        has_claude=true
    fi
    
    if [ -d ".cursor" ] || [ -f ".cursorrules" ]; then
        has_cursor=true
    fi
    
    if [ "$has_claude" = true ] && [ "$has_cursor" = true ]; then
        echo "both"
    elif [ "$has_claude" = true ]; then
        echo "claude"
    elif [ "$has_cursor" = true ]; then
        echo "cursor"
    else
        echo "unknown"
    fi
}

# Check for updates more efficiently
check_for_updates() {
    # Quick connectivity check
    if ! curl -s -I "$AGENT_OS_REPO" > /dev/null 2>&1; then
        return 1  # No internet, skip update check
    fi
    
    # Get latest release tag
    local latest_tag=$(curl -s "https://api.github.com/repos/carmandale/agent-os/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    
    # If no releases, we're using main branch
    if [ -z "$latest_tag" ]; then
        echo "main"
        return 0
    fi
    
    # Check installed version
    if [ -f "$HOME/.agent-os/.version" ]; then
        local installed_version=$(cat "$HOME/.agent-os/.version")
        if [ "$installed_version" != "$latest_tag" ]; then
            echo "$latest_tag"  # Return new version available
            return 0
        fi
    fi
    
    echo "current"  # Up to date
    return 0
}

# Smart update that preserves customizations
smart_update() {
    echo ""
    echo "🔄 Agent OS Update"
    echo "=================="
    
    # Check what's customized
    local has_custom_standards=false
    local has_custom_hooks=false
    
    # Check if standards were modified in last 30 days
    if find "$HOME/.agent-os/standards" -type f -mtime -30 2>/dev/null | grep -q .; then
        has_custom_standards=true
        print_status "info" "Detected customized standards (modified in last 30 days)"
    fi
    
    # Check if hooks are v2 or v3
    if [ -f "$HOME/.claude/settings.json" ] && grep -q "workflow-enforcement-hook-v[23]" "$HOME/.claude/settings.json" 2>/dev/null; then
        has_custom_hooks=true
        print_status "info" "Detected custom hook configuration"
    fi
    
    # Smart update options
    echo ""
    echo "Update options:"
    echo "  1) Smart update (recommended) - Updates core files, preserves customizations"
    echo "  2) Instructions only - Only update workflow instructions"
    echo "  3) Full update - Overwrite everything (backup created)"
    echo "  4) Cancel"
    echo ""
    echo -n "Choice [1-4]: "
    read -r choice
    
    case "$choice" in
        1)  # Smart update
            print_status "info" "Performing smart update..."
            
            # Backup current installation
            if [ -d "$HOME/.agent-os" ]; then
                cp -r "$HOME/.agent-os" "$HOME/.agent-os.backup-$(date +%Y%m%d-%H%M%S)"
                print_status "success" "Backup created"
            fi
            
            # Run update with appropriate flags
            local flags="--overwrite-instructions"
            if [ "$has_custom_standards" = false ]; then
                flags="$flags --overwrite-standards"
            fi
            
            if curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash -s -- $flags; then
                print_status "success" "Smart update complete"
                
                # Update hooks if needed
                if [ "$has_custom_hooks" = false ] && [ -f "$HOME/.agent-os/hooks/install-hooks.sh" ]; then
                    print_status "info" "Updating hooks..."
                    "$HOME/.agent-os/hooks/install-hooks.sh" 2>/dev/null
                fi
                
                return 0
            else
                print_status "error" "Update failed - backup available at ~/.agent-os.backup-*"
                return 1
            fi
            ;;
            
        2)  # Instructions only
            print_status "info" "Updating instructions only..."
            if curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash -s -- --overwrite-instructions; then
                print_status "success" "Instructions updated"
                return 0
            else
                print_status "error" "Update failed"
                return 1
            fi
            ;;
            
        3)  # Full update
            print_status "warning" "Full update will overwrite all customizations"
            echo -n "Are you sure? (y/n): "
            read -r confirm
            if [[ "$confirm" == "y" ]]; then
                # Backup first
                if [ -d "$HOME/.agent-os" ]; then
                    cp -r "$HOME/.agent-os" "$HOME/.agent-os.backup-$(date +%Y%m%d-%H%M%S)"
                    print_status "success" "Backup created"
                fi
                
                if curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash -s -- --overwrite-instructions --overwrite-standards; then
                    print_status "success" "Full update complete"
                    return 0
                else
                    print_status "error" "Update failed - backup available"
                    return 1
                fi
            else
                print_status "info" "Update cancelled"
                return 1
            fi
            ;;
            
        *)
            print_status "info" "Update cancelled"
            return 1
            ;;
    esac
}

# Quick project setup
quick_setup_project() {
    local project_type=$(detect_project_type)
    
    # If type unknown, ask once
    if [ "$project_type" = "unknown" ]; then
        echo ""
        echo "Which AI assistant will you use?"
        echo "  1) Claude Code"
        echo "  2) Cursor"
        echo "  3) Both"
        echo "  4) Skip"
        echo -n "Choice [1-4]: "
        read -r choice
        
        case "$choice" in
            1) project_type="claude" ;;
            2) project_type="cursor" ;;
            3) project_type="both" ;;
            *) return 1 ;;
        esac
    fi
    
    # Setup based on type
    case "$project_type" in
        "claude"|"both")
            print_status "info" "Setting up Claude Code..."
            # Check if hooks should be skipped
            local skip_hooks=""
            if [ -f "$HOME/.claude/settings.json" ] && grep -q "workflow-enforcement-hook" "$HOME/.claude/settings.json" 2>/dev/null; then
                skip_hooks="--skip-hooks"
            fi
            
            if curl -sSL "$AGENT_OS_RAW_URL/setup-claude-code.sh" | bash -s -- $skip_hooks 2>/dev/null; then
                print_status "success" "Claude Code ready"
            else
                print_status "error" "Claude Code setup failed"
            fi
            
            if [ "$project_type" = "both" ]; then
                print_status "info" "Setting up Cursor..."
                if curl -sSL "$AGENT_OS_RAW_URL/setup-cursor.sh" | bash 2>/dev/null; then
                    print_status "success" "Cursor ready"
                else
                    print_status "error" "Cursor setup failed"
                fi
            fi
            ;;
            
        "cursor")
            print_status "info" "Setting up Cursor..."
            if curl -sSL "$AGENT_OS_RAW_URL/setup-cursor.sh" | bash 2>/dev/null; then
                print_status "success" "Cursor ready"
            else
                print_status "error" "Cursor setup failed"
            fi
            ;;
    esac
    
    # Quick tips
    echo ""
    print_status "success" "Project setup complete!"
    echo ""
    echo "Quick start commands:"
    if [ "$project_type" = "claude" ] || [ "$project_type" = "both" ]; then
        echo "  Claude: /analyze-product (for existing code) or /plan-product (for new)"
    fi
    if [ "$project_type" = "cursor" ] || [ "$project_type" = "both" ]; then
        echo "  Cursor: @analyze-product (for existing code) or @plan-product (for new)"
    fi
}

# Streamlined status check
check_status() {
    echo "📊 Agent OS Status"
    echo "=================="
    
    # Global installation
    if check_global_installation; then
        print_status "success" "Installed at ~/.agent-os/"
        
        # Quick file count
        local inst_count=$(ls ~/.agent-os/instructions/*.md 2>/dev/null | wc -l | tr -d ' ')
        local std_count=$(ls ~/.agent-os/standards/*.md 2>/dev/null | wc -l | tr -d ' ')
        echo "   • $inst_count instruction files"
        echo "   • $std_count standard files"
        
        # Check version
        local update_status=$(check_for_updates)
        if [ "$update_status" = "current" ]; then
            print_status "success" "Up to date"
        elif [ "$update_status" = "main" ]; then
            print_status "info" "Using main branch"
        elif [ ! -z "$update_status" ]; then
            print_status "warning" "Update available: $update_status"
        fi
    else
        print_status "error" "Not installed"
        return 1
    fi
    
    # Project status
    echo ""
    local project_type=$(detect_project_type)
    if [ "$project_type" != "unknown" ]; then
        print_status "success" "Project type: $project_type"
        
        if [ -d ".agent-os/product" ]; then
            print_status "success" "Product docs initialized"
        else
            print_status "info" "Product docs not initialized (use /analyze-product)"
        fi
    else
        print_status "info" "No AI assistant detected"
    fi
}

# Main menu - streamlined
main_menu() {
    # Quick status
    if ! check_global_installation; then
        print_status "warning" "Agent OS not installed"
        echo -n "Install now? (y/n): "
        read -r response
        if [[ "$response" == "y" ]]; then
            if curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash; then
                print_status "success" "Installation complete!"
                quick_setup_project
            fi
        fi
        return
    fi
    
    # Already installed - check for updates silently
    local update_status=$(check_for_updates)
    if [ "$update_status" != "current" ] && [ "$update_status" != "main" ] && [ ! -z "$update_status" ]; then
        print_status "warning" "Update available: $update_status"
    fi
    
    # Simple menu
    echo ""
    echo "What would you like to do?"
    echo "  1) Setup project  - Configure AI assistant for this project"
    echo "  2) Update        - Update Agent OS installation"
    echo "  3) Status        - Check installation details"
    echo "  4) Exit"
    echo ""
    echo -n "Choice [1-4]: "
    read -r choice
    
    case "$choice" in
        1) quick_setup_project ;;
        2) smart_update ;;
        3) check_status ;;
        *) print_status "info" "Goodbye!" ;;
    esac
}

# Command line interface
case "${1:-}" in
    "init")
        if ! check_global_installation; then
            print_status "info" "Installing Agent OS first..."
            curl -sSL "$AGENT_OS_RAW_URL/setup.sh" | bash
        fi
        quick_setup_project
        ;;
    "update")
        smart_update
        ;;
    "status"|"check")
        check_status
        ;;
    "help"|"--help"|"-h")
        echo "aos - Agent OS Quick Setup"
        echo ""
        echo "Usage: aos [command]"
        echo ""
        echo "Commands:"
        echo "  init     Setup Agent OS in current project"
        echo "  update   Smart update Agent OS"
        echo "  status   Check installation status"
        echo "  help     Show this help"
        echo ""
        echo "No command runs interactive mode"
        ;;
    "")
        # Interactive mode
        echo "🚀 Agent OS Quick Setup"
        echo "======================="
        main_menu
        ;;
    *)
        print_status "error" "Unknown command: $1"
        echo "Run 'aos help' for usage"
        exit 1
        ;;
esac