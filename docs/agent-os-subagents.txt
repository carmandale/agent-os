# tactiq.io free youtube transcript
# No title found
# https://www.youtube.com/watch/YL8KsWTlCKI

00:00:00.000 No text
00:00:00.080 If you've ever watched cloud code forget
00:00:02.000 that function that you've just built or
00:00:04.000 lose track of your project structure
00:00:06.000 midway through a session, then you know
00:00:08.240 exactly what I'm talking about. It
00:00:10.000 starts to forget important details
00:00:12.080 because in a longunning session, Cloud
00:00:15.120 Code will automatically compact the
00:00:17.279 conversation and then suddenly it's
00:00:19.119 suggesting changes that would break
00:00:21.039 everything that you've just built. The
00:00:22.560 real problem is that we're filling up
00:00:23.840 the context window way faster than we
00:00:26.000 should be. every verbose instruction,
00:00:28.640 every unnecessary file that's read,
00:00:31.039 every back and forth revision, all of
00:00:33.120 that adds up and before you know it,
00:00:34.800 Claude code is working with a fraction
00:00:37.040 of the context or the short-term memory,
00:00:39.840 if you will, that it needs in order to
00:00:41.680 be effective. So, here's what I
00:00:43.360 discovered. You can actually accomplish
00:00:45.120 a lot more with Cloud Code by doing
00:00:47.280 less. I've got a few simple adjustments
00:00:49.840 that you can start making today to not
00:00:52.640 only 10x or 50x the size of the context
00:00:55.520 window that you're working with, but
00:00:56.960 these tips will also help you streamline
00:00:58.800 your entire workflow. You'll build
00:01:00.800 features faster, you'll debug more
00:01:02.800 efficiently, and you'll never lose
00:01:05.119 momentum due to these context limits.
00:01:07.920 This is how we start to think about
00:01:09.280 context engineering. It's about making
00:01:11.600 this a win-win. more productive sessions
00:01:14.720 and a smoother development experience
00:01:16.799 when you're building with AI. So, in
00:01:18.799 this video, I'll show you some of these
00:01:20.080 new power moves when you're working with
00:01:21.520 cloud code, including making the use of
00:01:23.600 the new sub aents feature, which is a
00:01:25.680 total gamecher, and I'll show you some
00:01:27.600 updates that I just made to agent OS.
00:01:30.000 That's the free open- source system I
00:01:32.320 built for specdriven development with
00:01:34.720 cloud code. It supports the new sub
00:01:36.880 aents feature and I found a few ways for
00:01:39.280 agent OS to help you use your context
00:01:41.439 window more efficiently. As we go along
00:01:43.840 here, I'll reveal a few pitfalls that I
00:01:45.680 ran into in my projects and maybe you
00:01:47.840 are too, which could be secretly eating
00:01:50.320 up your context window unnecessarily.
00:01:52.960 Once you see how simple these fixes are,
00:01:54.880 you'll be speeding past other
00:01:56.320 developers. Because that's what I do
00:01:57.920 here on the channel and in my free
00:01:59.680 weekly email, the builder briefing. I
00:02:02.000 help professionals like you and me
00:02:03.520 upgrade our workflows when it comes to
00:02:05.600 building with AI. You can get the next
00:02:07.759 issue of my builder briefing by going to
00:02:09.520 buildermethods.com.
00:02:11.120 And subscribers will be the first to
00:02:12.720 access my Claude Code course coming this
00:02:15.200 year. Now, in case you're wondering what
00:02:16.000 No text
00:02:16.879 all this talk about context windows is
00:02:18.720 all about, let me give you a quick
00:02:20.239 refresher. Think of Claude Code's
00:02:22.239 context window as its short-term memory.
00:02:25.360 every prompt you write, every file it
00:02:27.760 reads, every response it generates takes
00:02:30.160 up a little bit more space in that
00:02:32.160 context window. Now, this is not to be
00:02:34.239 confused with Claude MD files, which I
00:02:36.800 tend to think of as the long-term memory
00:02:39.040 for Cloud Code since it contains
00:02:40.720 information that Claude can refer back
00:02:42.400 to anytime. The context window, on the
00:02:44.879 other hand, I think of as the short-term
00:02:46.800 memory for Cloud Code since that's the
00:02:48.959 memory of things that we're working on
00:02:50.800 right now and in the past few minutes.
00:02:53.120 The context window for cloud code is
00:02:54.959 around 200,000 tokens. And that might
00:02:57.599 seem like a lot, but you'd be surprised
00:02:59.280 at how quickly it could add up. Reading
00:03:01.519 a typical file in your codebase could
00:03:03.200 eat up 500 or a,000 tokens multiplied by
00:03:06.159 all the files in your codebase. And then
00:03:08.159 again, if it's searching and rereading
00:03:10.159 files or reading logs or fetching
00:03:12.879 documentation off the web and reading
00:03:15.040 all of that or analyzing an image or
00:03:17.599 reading a highly detailed spec, all of
00:03:20.480 that fills up the context window fast.
00:03:23.040 And once that context window fills up,
00:03:25.120 cloud code starts forgetting things.
00:03:27.120 It's not that cloud stops working
00:03:28.560 altogether. It tries to automatically
00:03:30.879 compact the conversation, but in that
00:03:32.799 process, it loses important details. So
00:03:36.000 that function that you just wrote, it
00:03:37.920 forgot about that. Or that important
00:03:39.599 instruction that you gave it earlier,
00:03:41.760 that's gone. Now it can find those
00:03:43.760 details again, but it's like you're
00:03:45.200 paying twice because the searching and
00:03:47.040 rereading of the content eats up more
00:03:49.519 tokens in your context window. Now I'm
00:03:50.000 No text
00:03:52.080 going to get into how to be a lot more
00:03:53.440 efficient when it comes to managing your
00:03:55.120 context window. But what do we do when
00:03:57.200 we've already filled it up or we're
00:03:58.959 coming close? You may know about the
00:04:00.640 clear command, which completely resets
00:04:02.560 the context. It's a clean slate. Use
00:04:05.040 clear when you're done and you're ready
00:04:07.200 to move on to the next task and the
00:04:09.360 previous context doesn't even matter.
00:04:11.439 You know, using the clear command is
00:04:12.879 just like spinning up a fresh cloud code
00:04:15.120 instance, whether you're in a new
00:04:16.798 terminal or if you're spinning up
00:04:18.639 multiple cloud codes that run at the
00:04:20.880 same time. And by the way, I have
00:04:22.479 another video on this channel where I
00:04:24.400 show you the best workflow for
00:04:26.160 multitasking with cloud code. And then
00:04:28.320 you have the compact command which cloud
00:04:30.160 code will actually use on its own
00:04:32.000 automatically when you've filled up your
00:04:34.160 context window. And what that will do is
00:04:36.160 it'll summarize everything from your
00:04:38.320 current context and then start a fresh
00:04:40.479 context, pass along that summary so that
00:04:42.800 you can somewhat continue where you left
00:04:44.720 off. Now I say somewhat because you know
00:04:47.440 a small summary of a 200,000 token
00:04:50.080 conversation certainly will not capture
00:04:52.320 every important detail that you want to
00:04:54.160 carry forward. So, did you know that you
00:04:56.160 can proactively run the compact command
00:04:58.720 and give it specific instructions on
00:05:00.880 exactly which pieces of information and
00:05:03.759 bits of content that you want it to
00:05:05.919 include in that summary to pass along as
00:05:08.639 you extend out the context window and
00:05:11.280 cloud code conveniently shows you when
00:05:13.280 your context window is running low. So,
00:05:15.520 that could be a good indicator for when
00:05:17.039 it might be time for you to run that
00:05:18.560 custom compact command and pass along
00:05:20.880 your instructions to keep it going. And
00:05:22.800 so instead of just typing /compact or
00:05:25.120 letting cloud code run that
00:05:26.320 automatically, you might try something
00:05:28.000 like /compact keep the database schema
00:05:30.720 and the authentication logic. And now
00:05:32.960 cloud code knows exactly what to
00:05:34.400 preserve when it compresses everything
00:05:35.000 No text
00:05:36.400 else. All right, now we've got to talk
00:05:38.000 about the new sub aents feature in cloud
00:05:40.240 code because it's a complete gamecher
00:05:42.160 both when it comes to your workflow and
00:05:44.560 for massively extending your context
00:05:46.880 window. Sub agents let you create
00:05:48.880 dedicated coding agents that are highly
00:05:51.039 specialized in a particular area like
00:05:53.360 running tests or creating files or
00:05:55.759 committing to git. And so when you call
00:05:57.680 on a sub aent or when you ask cloud code
00:06:00.240 to delegate to any of your sub aents, it
00:06:02.880 passes along instructions and then your
00:06:04.960 sub agent performs a task in its own
00:06:07.360 fresh context window. Meaning while it's
00:06:09.919 performing that task, it's not eating up
00:06:12.319 context in the main agents window. All
00:06:15.520 right, let me show you an example of
00:06:16.880 putting sub aents to work when I'm using
00:06:19.039 agent OS in cloud code. So, as a simple
00:06:21.840 example, I'm going to start creating a
00:06:23.120 tic-tac-toe game. So, I'm going to fire
00:06:24.800 up Claude and I'm going to run the agent
00:06:27.280 OS plan product command. And this is
00:06:30.319 going to go through our product planning
00:06:32.160 process.
00:06:34.560 First, it'll gather some information
00:06:35.919 about the product that I want to build.
00:06:37.520 And usually, I give it a lot more detail
00:06:39.039 than this, but this is just a simple
00:06:40.479 example. Uh, we're going to build a
00:06:42.000 simple tic-tac-toe game. Just creating a
00:06:44.240 simple HTML vanilla JavaScript thing
00:06:46.479 here.
00:06:49.039 Okay, so it just called on the first sub
00:06:50.960 agent. That's the context fetcher. And
00:06:53.199 what that one does is it goes into my
00:06:55.840 agent OS documentation and it pulls out
00:06:57.919 my important preferences when it comes
00:06:59.440 to building uh products. It it then
00:07:02.400 called on my file creator sub agent to
00:07:05.120 create uh some files and folders inside
00:07:07.680 my project. And so these are things that
00:07:09.599 would normally eat up tokens in my main
00:07:12.160 context, but as you can literally see
00:07:13.919 here, you know, 3,500 tokens were taken
00:07:16.880 by that sub agent. This one is writing
00:07:19.520 several files and folders right now. Um,
00:07:22.160 all using its own tokens in its own
00:07:24.560 context window. Okay, so now agent OS is
00:07:27.360 going on to document the mission for
00:07:29.120 this new product following our process
00:07:31.199 for that. Again, we're calling on the
00:07:33.120 file creator sub agent. You can see the
00:07:35.520 previous one used, you know, over 7,000
00:07:37.840 tokens on its own. And this one is now
00:07:40.720 writing a detailed mission for the
00:07:42.800 product. And as it works, we are not
00:07:44.800 eating up the main agents context
00:07:47.199 window. And so you can literally start
00:07:49.120 to see the savings in context space. You
00:07:51.919 know, 8,000 tokens, 7500, 3500, and on
00:07:55.759 we go. Now, we're building out the tech
00:07:57.280 stack for this uh very simple game
00:07:59.759 product. And all of this is being built
00:08:02.240 into the product folder in my project.
00:08:05.039 My other video on the channel does a
00:08:06.560 full deep dive into how agent OS works
00:08:09.360 and the philosophy behind it and how to
00:08:11.440 use it. So you should check that out.
00:08:12.879 Now, one of the nice things about how
00:08:14.400 agent OS is designed is we're going to
00:08:16.560 build out all these product planning
00:08:18.240 documents like the mission statement and
00:08:20.639 the you know the target users, the
00:08:22.639 problem, the solution. Uh we build out a
00:08:24.960 whole uh road map. We have our whole uh
00:08:27.520 tech stack documented here. And then
00:08:29.360 this is a new update to agent OS. We're
00:08:31.440 now creating a mission light. So we have
00:08:34.719 some of these like light versions which
00:08:36.799 are easier and more context efficient to
00:08:39.919 refer back to later when we're creating
00:08:42.559 feature specs and then executing the
00:08:44.560 tasks for those feature specs. All this
00:08:46.800 stuff is useful for us humans on on the
00:08:49.519 team as well as feeding it as training
00:08:52.320 material to Agent OS when it's writing
00:08:54.880 out specs. Okay, so we've built out all
00:08:57.040 the product planning stuff for this
00:08:58.880 project. The next step, of course, would
00:09:00.399 be to move on to writing feature specs
00:09:02.480 and then actually building out those
00:09:03.839 specs. And those can even be in their
00:09:05.760 own context windows. But let's just see
00:09:08.160 what happened here. Every time we see
00:09:09.680 one of these like highlighted things
00:09:11.120 here, that means that it used a sub
00:09:12.959 agent to do that task. And you can
00:09:14.880 literally see the savings in uh in in
00:09:18.399 context here. Again, like you know,
00:09:20.480 almost 8,000 tokens, 9K tokens, 7,500.
00:09:24.160 So each of these were done in their own
00:09:26.320 context window. And so agent OS now
00:09:28.640 actually ships with its own cloud code
00:09:30.880 sub aents. As of today, we have four
00:09:33.040 that are built in. And I'm adding a few
00:09:34.720 more as we go along here. Um, so I'm
00:09:36.959 hopping over to my home folder on my
00:09:39.040 system here. We've got my core uh agent
00:09:41.920 OS instructions and standards. Again, I
00:09:44.399 go deep into that in the agent OS video
00:09:46.720 on my channel. But in the clawed folder,
00:09:49.839 we install the agents folder with these
00:09:53.839 uh four sub aents. So you can take a
00:09:56.560 look here. We've got the our context
00:09:58.240 fetcher. And by the way, I'm following
00:10:00.560 Anthropic's instructions to to say use
00:10:03.839 proactively to to do whatever it is that
00:10:06.800 you do. In this case, it retrieves and
00:10:08.399 extracts relevant information. So it's
00:10:10.880 like reading lots of files and finding
00:10:12.959 bits of information. I want that to be
00:10:14.959 done by a sub agent so that I'm not
00:10:17.279 eating up that context in the main
00:10:19.360 agents conversation. Um, file creator is
00:10:22.480 for creating, you know, new files,
00:10:24.240 directories, applying templates and
00:10:26.160 whatnot. Uh, git workflow is for, you
00:10:28.880 know, commit messages and creating pull
00:10:30.959 requests. And then testr runner is for
00:10:33.680 proactively running all of our tests for
00:10:36.560 specific features or running the entire
00:10:38.720 test suite and then suggesting fixes
00:10:40.959 back to the main agent to execute on
00:10:43.279 those fixes. So, you know, we've got
00:10:45.120 like workflows and stuff built into
00:10:46.880 these agents. Um, you can take a look at
00:10:48.959 them. Agent OS is free and open source
00:10:51.440 for you to uh tweak and use and build on
00:10:53.839 in your own projects. And by the way, if
00:10:55.760 you want to start to spin up your own
00:10:57.120 agents for cloud code, it's super simple
00:10:59.200 to do. All you need to do is run agent.
00:11:01.600 And first it'll show you the agents that
00:11:03.440 you have. Again, we installed a few from
00:11:05.519 agent OS. You might not have any yet.
00:11:07.519 And so you can just go here and create a
00:11:09.360 new agent. Uh you can decide if it
00:11:11.600 should be specific to the current
00:11:13.040 project or if you want to install it
00:11:15.120 into that global agents folder on your
00:11:18.320 system as we did using uh agent OS. And
00:11:21.360 so you would just go through there and
00:11:22.560 then you know generate with cloud.
00:11:24.240 They'll give you a simple process and a
00:11:26.000 simple template. Let's go ahead and do
00:11:27.680 that. Let's create a an an agent that's
00:11:30.000 uh an expert at refactoring front-end
00:11:34.480 templates. I probably want to develop
00:11:36.399 something like that in the near future.
00:11:38.480 Um but let's just see what it comes up
00:11:39.839 with. You know, then you can actually
00:11:41.360 decide which sets of tools are going to
00:11:44.000 be available to the sub agent. You can
00:11:46.560 uh even give it more granular control.
00:11:48.560 In this case, uh this is just an
00:11:49.920 example. We'll go with all tools. Oh, I
00:11:52.079 actually I just unselected that. So, I'm
00:11:54.079 going to select that again. Then I'm
00:11:55.760 going to go up to continue. We'll decide
00:11:58.240 which model it uses. Got to go with
00:12:00.160 opus, right? Then you can give it give
00:12:01.760 it any color that you want. Let's go
00:12:03.040 with orange. All right. Then it gives us
00:12:04.800 a basic template for uh the agent
00:12:07.279 itself. Let's go ahead and accept that.
00:12:09.839 And I'm going to hop over to my home
00:12:11.440 folder, which is where uh it installed
00:12:13.440 it on my system. And we're going to go
00:12:15.519 into claude under agents. And there is
00:12:18.639 the front-end uh template refactor agent
00:12:21.440 that it created. So, you know, Cloud
00:12:23.600 Code itself actually generated all of
00:12:26.320 this, you know, example content just
00:12:28.240 just on the very short description that
00:12:29.839 I gave it. Now, you know, you'll
00:12:31.440 probably want to go in here and really
00:12:32.800 tweak it to your exact preferences for
00:12:35.440 what you want this type of agent to do.
00:12:37.519 Um, but that's a look at the process for
00:12:38.000 No text
00:12:39.519 spinning up your own agents. Here's the
00:12:42.000 counterintuitive part. We're used to
00:12:43.839 training our human team members with
00:12:46.320 detailed documentation and context. But
00:12:49.120 when it comes to training AI agents,
00:12:51.279 being verbose can actually hurt
00:12:53.120 performance. Every extra word in your
00:12:55.279 instructions not only adds to your
00:12:57.200 context window, but also introduces the
00:12:59.680 opportunity for Cloud Code to get
00:13:01.760 confused or go down the wrong path. So,
00:13:03.839 it's better to be concise and direct and
00:13:06.320 then instruct Cloud Code to ask
00:13:08.320 clarifying questions when it needs to.
00:13:10.399 Think of it like this. You want Claude
00:13:12.000 code to act like a senior developer who
00:13:14.320 knows when to ask clarifying questions
00:13:16.320 when it needs to, not a junior developer
00:13:18.800 who needs every little detail spelled
00:13:20.800 out. This is why spec driven development
00:13:22.880 works so well. When you develop clear
00:13:25.120 specs upfront and then you spend the
00:13:27.360 time to review that execution plan
00:13:29.680 before you build, you don't need to give
00:13:32.160 Claude code verbose instructions when
00:13:34.320 you get up to that building phase. the
00:13:36.240 agent can just work from and pull from
00:13:38.160 those well-crafted specs without needing
00:13:40.959 to give it extra explanations. Now, in
00:13:43.120 my last video on this channel, I did a
00:13:44.800 deep dive into that specdriven
00:13:46.399 development approach. So, you won't want
00:13:48.000 to miss that. And this week, I released
00:13:49.680 an update to Agent OS where I cut almost
00:13:52.000 half of the instruction lines, making
00:13:53.920 them simpler and more direct. The
00:13:55.920 result, Agent OS is helping me build
00:13:57.920 even more ambitious projects with cloud
00:14:00.079 code because it's that much more
00:14:01.760 efficient at managing the context
00:14:03.000 No text
00:14:03.920 window. Now, my last tip when it comes
00:14:05.839 to working efficiently is I don't
00:14:07.600 actually use cloud code for everything.
00:14:09.760 I like to use cloud code as my workhorse
00:14:11.760 for building entire features, typically
00:14:13.600 from a spec. But I found that what
00:14:15.279 really starts to eat up the context
00:14:16.880 window in cloud code are those back and
00:14:18.880 forth rounds of revisions. You know,
00:14:20.800 move this function over here or refactor
00:14:23.120 that code or go fetch some documentation
00:14:25.360 from the web and fix some code based on
00:14:27.360 what you learned. All that stuff adds up
00:14:29.360 and then when it comes time to build the
00:14:31.360 next feature with claude code, you're
00:14:33.199 out of space in the context window.
00:14:35.199 That's why I'm currently using Claude
00:14:36.720 Code running inside of Cursor. I find
00:14:38.959 Cursor's interface to be better designed
00:14:40.639 for that rapidfire collaborative
00:14:43.360 tweaking and refining. I can make quick
00:14:45.440 adjustments in Cursor's AI chat without
00:14:47.920 worrying about polluting or busting my
00:14:50.480 well-managed context window in Cloud
00:14:53.199 Code. You know, this isn't about one
00:14:54.800 versus the other. This is about two
00:14:56.639 specialized tools working really well
00:14:59.279 handinand. Cloud code for creation,
00:15:02.000 cursor for collaboration and refinement.
00:15:05.519 So hopefully you can see how just a few
00:15:07.440 simple adjustments can give you a
00:15:09.120 massive efficiency boost when you're
00:15:11.040 working with cloud code. Now for a
00:15:12.720 deeper dive into what cloud code is
00:15:14.480 really all about and the movement that
00:15:16.880 it's creating in our industry, I want
00:15:18.800 you to see my other video where I make
00:15:20.399 the case for cloud code. So, right after
00:15:22.480 you hit subscribe on this channel, you
00:15:24.000 can check out that video next and I'll
00:15:25.680 see you there. Let's keep building.
